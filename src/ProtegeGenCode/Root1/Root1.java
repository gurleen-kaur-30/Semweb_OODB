package ProtegeGenCode.Root1;

import ProtegeGenCode.Root1.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: Root1<br>
 * @version generated on Wed Apr 28 11:02:02 IST 2021 by prateksha
 */
public class Root1 implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public Root1(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public Root1(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#American
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#American", American.class, DefaultAmerican.class);
    }

    /**
     * Creates an instance of type American.  Modifies the underlying ontology.
     */
    public American createAmerican(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AMERICAN, DefaultAmerican.class);
    }

    /**
     * Gets an instance of type American with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public American getAmerican(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AMERICAN, DefaultAmerican.class);
    }

    /**
     * Gets all instances of American from the ontology.
     */
    public Collection<? extends American> getAllAmericanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AMERICAN, DefaultAmerican.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#AmericanHot
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#AmericanHot", AmericanHot.class, DefaultAmericanHot.class);
    }

    /**
     * Creates an instance of type AmericanHot.  Modifies the underlying ontology.
     */
    public AmericanHot createAmericanHot(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AMERICANHOT, DefaultAmericanHot.class);
    }

    /**
     * Gets an instance of type AmericanHot with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AmericanHot getAmericanHot(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AMERICANHOT, DefaultAmericanHot.class);
    }

    /**
     * Gets all instances of AmericanHot from the ontology.
     */
    public Collection<? extends AmericanHot> getAllAmericanHotInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AMERICANHOT, DefaultAmericanHot.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#AnchoviesTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#AnchoviesTopping", AnchoviesTopping.class, DefaultAnchoviesTopping.class);
    }

    /**
     * Creates an instance of type AnchoviesTopping.  Modifies the underlying ontology.
     */
    public AnchoviesTopping createAnchoviesTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANCHOVIESTOPPING, DefaultAnchoviesTopping.class);
    }

    /**
     * Gets an instance of type AnchoviesTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AnchoviesTopping getAnchoviesTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANCHOVIESTOPPING, DefaultAnchoviesTopping.class);
    }

    /**
     * Gets all instances of AnchoviesTopping from the ontology.
     */
    public Collection<? extends AnchoviesTopping> getAllAnchoviesToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANCHOVIESTOPPING, DefaultAnchoviesTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#ArtichokeTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#ArtichokeTopping", ArtichokeTopping.class, DefaultArtichokeTopping.class);
    }

    /**
     * Creates an instance of type ArtichokeTopping.  Modifies the underlying ontology.
     */
    public ArtichokeTopping createArtichokeTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTICHOKETOPPING, DefaultArtichokeTopping.class);
    }

    /**
     * Gets an instance of type ArtichokeTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ArtichokeTopping getArtichokeTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTICHOKETOPPING, DefaultArtichokeTopping.class);
    }

    /**
     * Gets all instances of ArtichokeTopping from the ontology.
     */
    public Collection<? extends ArtichokeTopping> getAllArtichokeToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTICHOKETOPPING, DefaultArtichokeTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#AsparagusTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#AsparagusTopping", AsparagusTopping.class, DefaultAsparagusTopping.class);
    }

    /**
     * Creates an instance of type AsparagusTopping.  Modifies the underlying ontology.
     */
    public AsparagusTopping createAsparagusTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ASPARAGUSTOPPING, DefaultAsparagusTopping.class);
    }

    /**
     * Gets an instance of type AsparagusTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AsparagusTopping getAsparagusTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ASPARAGUSTOPPING, DefaultAsparagusTopping.class);
    }

    /**
     * Gets all instances of AsparagusTopping from the ontology.
     */
    public Collection<? extends AsparagusTopping> getAllAsparagusToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ASPARAGUSTOPPING, DefaultAsparagusTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Cajun
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Cajun", Cajun.class, DefaultCajun.class);
    }

    /**
     * Creates an instance of type Cajun.  Modifies the underlying ontology.
     */
    public Cajun createCajun(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAJUN, DefaultCajun.class);
    }

    /**
     * Gets an instance of type Cajun with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cajun getCajun(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAJUN, DefaultCajun.class);
    }

    /**
     * Gets all instances of Cajun from the ontology.
     */
    public Collection<? extends Cajun> getAllCajunInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAJUN, DefaultCajun.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#CajunSpiceTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#CajunSpiceTopping", CajunSpiceTopping.class, DefaultCajunSpiceTopping.class);
    }

    /**
     * Creates an instance of type CajunSpiceTopping.  Modifies the underlying ontology.
     */
    public CajunSpiceTopping createCajunSpiceTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAJUNSPICETOPPING, DefaultCajunSpiceTopping.class);
    }

    /**
     * Gets an instance of type CajunSpiceTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CajunSpiceTopping getCajunSpiceTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAJUNSPICETOPPING, DefaultCajunSpiceTopping.class);
    }

    /**
     * Gets all instances of CajunSpiceTopping from the ontology.
     */
    public Collection<? extends CajunSpiceTopping> getAllCajunSpiceToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAJUNSPICETOPPING, DefaultCajunSpiceTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#CaperTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#CaperTopping", CaperTopping.class, DefaultCaperTopping.class);
    }

    /**
     * Creates an instance of type CaperTopping.  Modifies the underlying ontology.
     */
    public CaperTopping createCaperTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAPERTOPPING, DefaultCaperTopping.class);
    }

    /**
     * Gets an instance of type CaperTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CaperTopping getCaperTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAPERTOPPING, DefaultCaperTopping.class);
    }

    /**
     * Gets all instances of CaperTopping from the ontology.
     */
    public Collection<? extends CaperTopping> getAllCaperToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAPERTOPPING, DefaultCaperTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Capricciosa
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Capricciosa", Capricciosa.class, DefaultCapricciosa.class);
    }

    /**
     * Creates an instance of type Capricciosa.  Modifies the underlying ontology.
     */
    public Capricciosa createCapricciosa(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAPRICCIOSA, DefaultCapricciosa.class);
    }

    /**
     * Gets an instance of type Capricciosa with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Capricciosa getCapricciosa(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAPRICCIOSA, DefaultCapricciosa.class);
    }

    /**
     * Gets all instances of Capricciosa from the ontology.
     */
    public Collection<? extends Capricciosa> getAllCapricciosaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAPRICCIOSA, DefaultCapricciosa.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Caprina
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Caprina", Caprina.class, DefaultCaprina.class);
    }

    /**
     * Creates an instance of type Caprina.  Modifies the underlying ontology.
     */
    public Caprina createCaprina(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CAPRINA, DefaultCaprina.class);
    }

    /**
     * Gets an instance of type Caprina with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Caprina getCaprina(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CAPRINA, DefaultCaprina.class);
    }

    /**
     * Gets all instances of Caprina from the ontology.
     */
    public Collection<? extends Caprina> getAllCaprinaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CAPRINA, DefaultCaprina.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#CheeseTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#CheeseTopping", CheeseTopping.class, DefaultCheeseTopping.class);
    }

    /**
     * Creates an instance of type CheeseTopping.  Modifies the underlying ontology.
     */
    public CheeseTopping createCheeseTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHEESETOPPING, DefaultCheeseTopping.class);
    }

    /**
     * Gets an instance of type CheeseTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CheeseTopping getCheeseTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHEESETOPPING, DefaultCheeseTopping.class);
    }

    /**
     * Gets all instances of CheeseTopping from the ontology.
     */
    public Collection<? extends CheeseTopping> getAllCheeseToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHEESETOPPING, DefaultCheeseTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#CheeseyPizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#CheeseyPizza", CheesyPizza.class, DefaultCheesyPizza.class);
    }

    /**
     * Creates an instance of type CheesyPizza.  Modifies the underlying ontology.
     */
    public CheesyPizza createCheesyPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHEESYPIZZA, DefaultCheesyPizza.class);
    }

    /**
     * Gets an instance of type CheesyPizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CheesyPizza getCheesyPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHEESYPIZZA, DefaultCheesyPizza.class);
    }

    /**
     * Gets all instances of CheesyPizza from the ontology.
     */
    public Collection<? extends CheesyPizza> getAllCheesyPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHEESYPIZZA, DefaultCheesyPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#CheeseyVegetableTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#CheeseyVegetableTopping", CheesyVegetableTopping.class, DefaultCheesyVegetableTopping.class);
    }

    /**
     * Creates an instance of type CheesyVegetableTopping.  Modifies the underlying ontology.
     */
    public CheesyVegetableTopping createCheesyVegetableTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHEESYVEGETABLETOPPING, DefaultCheesyVegetableTopping.class);
    }

    /**
     * Gets an instance of type CheesyVegetableTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CheesyVegetableTopping getCheesyVegetableTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHEESYVEGETABLETOPPING, DefaultCheesyVegetableTopping.class);
    }

    /**
     * Gets all instances of CheesyVegetableTopping from the ontology.
     */
    public Collection<? extends CheesyVegetableTopping> getAllCheesyVegetableToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHEESYVEGETABLETOPPING, DefaultCheesyVegetableTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#ChickenTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#ChickenTopping", ChickenTopping.class, DefaultChickenTopping.class);
    }

    /**
     * Creates an instance of type ChickenTopping.  Modifies the underlying ontology.
     */
    public ChickenTopping createChickenTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHICKENTOPPING, DefaultChickenTopping.class);
    }

    /**
     * Gets an instance of type ChickenTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ChickenTopping getChickenTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHICKENTOPPING, DefaultChickenTopping.class);
    }

    /**
     * Gets all instances of ChickenTopping from the ontology.
     */
    public Collection<? extends ChickenTopping> getAllChickenToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHICKENTOPPING, DefaultChickenTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Country
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Country", Country.class, DefaultCountry.class);
    }

    /**
     * Creates an instance of type Country.  Modifies the underlying ontology.
     */
    public Country createCountry(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COUNTRY, DefaultCountry.class);
    }

    /**
     * Gets an instance of type Country with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Country getCountry(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COUNTRY, DefaultCountry.class);
    }

    /**
     * Gets all instances of Country from the ontology.
     */
    public Collection<? extends Country> getAllCountryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COUNTRY, DefaultCountry.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#DeepPanBase
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#DeepPanBase", DeepPanBase.class, DefaultDeepPanBase.class);
    }

    /**
     * Creates an instance of type DeepPanBase.  Modifies the underlying ontology.
     */
    public DeepPanBase createDeepPanBase(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEEPPANBASE, DefaultDeepPanBase.class);
    }

    /**
     * Gets an instance of type DeepPanBase with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DeepPanBase getDeepPanBase(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEEPPANBASE, DefaultDeepPanBase.class);
    }

    /**
     * Gets all instances of DeepPanBase from the ontology.
     */
    public Collection<? extends DeepPanBase> getAllDeepPanBaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEEPPANBASE, DefaultDeepPanBase.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#DomainConcept
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#DomainConcept", DomainThing.class, DefaultDomainThing.class);
    }

    /**
     * Creates an instance of type DomainThing.  Modifies the underlying ontology.
     */
    public DomainThing createDomainThing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOMAINTHING, DefaultDomainThing.class);
    }

    /**
     * Gets an instance of type DomainThing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DomainThing getDomainThing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOMAINTHING, DefaultDomainThing.class);
    }

    /**
     * Gets all instances of DomainThing from the ontology.
     */
    public Collection<? extends DomainThing> getAllDomainThingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOMAINTHING, DefaultDomainThing.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Fiorentina
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Fiorentina", Fiorentina.class, DefaultFiorentina.class);
    }

    /**
     * Creates an instance of type Fiorentina.  Modifies the underlying ontology.
     */
    public Fiorentina createFiorentina(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FIORENTINA, DefaultFiorentina.class);
    }

    /**
     * Gets an instance of type Fiorentina with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fiorentina getFiorentina(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FIORENTINA, DefaultFiorentina.class);
    }

    /**
     * Gets all instances of Fiorentina from the ontology.
     */
    public Collection<? extends Fiorentina> getAllFiorentinaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FIORENTINA, DefaultFiorentina.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#FishTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#FishTopping", SeafoodTopping.class, DefaultSeafoodTopping.class);
    }

    /**
     * Creates an instance of type SeafoodTopping.  Modifies the underlying ontology.
     */
    public SeafoodTopping createSeafoodTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEAFOODTOPPING, DefaultSeafoodTopping.class);
    }

    /**
     * Gets an instance of type SeafoodTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SeafoodTopping getSeafoodTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEAFOODTOPPING, DefaultSeafoodTopping.class);
    }

    /**
     * Gets all instances of SeafoodTopping from the ontology.
     */
    public Collection<? extends SeafoodTopping> getAllSeafoodToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEAFOODTOPPING, DefaultSeafoodTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Food
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Food", Food.class, DefaultFood.class);
    }

    /**
     * Creates an instance of type Food.  Modifies the underlying ontology.
     */
    public Food createFood(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOOD, DefaultFood.class);
    }

    /**
     * Gets an instance of type Food with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Food getFood(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOOD, DefaultFood.class);
    }

    /**
     * Gets all instances of Food from the ontology.
     */
    public Collection<? extends Food> getAllFoodInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOOD, DefaultFood.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#FourCheesesTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#FourCheesesTopping", FourCheesesTopping.class, DefaultFourCheesesTopping.class);
    }

    /**
     * Creates an instance of type FourCheesesTopping.  Modifies the underlying ontology.
     */
    public FourCheesesTopping createFourCheesesTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOURCHEESESTOPPING, DefaultFourCheesesTopping.class);
    }

    /**
     * Gets an instance of type FourCheesesTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FourCheesesTopping getFourCheesesTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOURCHEESESTOPPING, DefaultFourCheesesTopping.class);
    }

    /**
     * Gets all instances of FourCheesesTopping from the ontology.
     */
    public Collection<? extends FourCheesesTopping> getAllFourCheesesToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOURCHEESESTOPPING, DefaultFourCheesesTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#FourSeasons
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#FourSeasons", FourSeasons.class, DefaultFourSeasons.class);
    }

    /**
     * Creates an instance of type FourSeasons.  Modifies the underlying ontology.
     */
    public FourSeasons createFourSeasons(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOURSEASONS, DefaultFourSeasons.class);
    }

    /**
     * Gets an instance of type FourSeasons with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FourSeasons getFourSeasons(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOURSEASONS, DefaultFourSeasons.class);
    }

    /**
     * Gets all instances of FourSeasons from the ontology.
     */
    public Collection<? extends FourSeasons> getAllFourSeasonsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOURSEASONS, DefaultFourSeasons.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#FruitTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#FruitTopping", FruitTopping.class, DefaultFruitTopping.class);
    }

    /**
     * Creates an instance of type FruitTopping.  Modifies the underlying ontology.
     */
    public FruitTopping createFruitTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FRUITTOPPING, DefaultFruitTopping.class);
    }

    /**
     * Gets an instance of type FruitTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FruitTopping getFruitTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FRUITTOPPING, DefaultFruitTopping.class);
    }

    /**
     * Gets all instances of FruitTopping from the ontology.
     */
    public Collection<? extends FruitTopping> getAllFruitToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FRUITTOPPING, DefaultFruitTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#FruttiDiMare
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#FruttiDiMare", FruttiDiMare.class, DefaultFruttiDiMare.class);
    }

    /**
     * Creates an instance of type FruttiDiMare.  Modifies the underlying ontology.
     */
    public FruttiDiMare createFruttiDiMare(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FRUTTIDIMARE, DefaultFruttiDiMare.class);
    }

    /**
     * Gets an instance of type FruttiDiMare with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FruttiDiMare getFruttiDiMare(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FRUTTIDIMARE, DefaultFruttiDiMare.class);
    }

    /**
     * Gets all instances of FruttiDiMare from the ontology.
     */
    public Collection<? extends FruttiDiMare> getAllFruttiDiMareInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FRUTTIDIMARE, DefaultFruttiDiMare.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#GarlicTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#GarlicTopping", GarlicTopping.class, DefaultGarlicTopping.class);
    }

    /**
     * Creates an instance of type GarlicTopping.  Modifies the underlying ontology.
     */
    public GarlicTopping createGarlicTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GARLICTOPPING, DefaultGarlicTopping.class);
    }

    /**
     * Gets an instance of type GarlicTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GarlicTopping getGarlicTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GARLICTOPPING, DefaultGarlicTopping.class);
    }

    /**
     * Gets all instances of GarlicTopping from the ontology.
     */
    public Collection<? extends GarlicTopping> getAllGarlicToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GARLICTOPPING, DefaultGarlicTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Giardiniera
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Giardiniera", Giardiniera.class, DefaultGiardiniera.class);
    }

    /**
     * Creates an instance of type Giardiniera.  Modifies the underlying ontology.
     */
    public Giardiniera createGiardiniera(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GIARDINIERA, DefaultGiardiniera.class);
    }

    /**
     * Gets an instance of type Giardiniera with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Giardiniera getGiardiniera(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GIARDINIERA, DefaultGiardiniera.class);
    }

    /**
     * Gets all instances of Giardiniera from the ontology.
     */
    public Collection<? extends Giardiniera> getAllGiardinieraInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GIARDINIERA, DefaultGiardiniera.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#GoatsCheeseTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#GoatsCheeseTopping", GoatsCheeseTopping.class, DefaultGoatsCheeseTopping.class);
    }

    /**
     * Creates an instance of type GoatsCheeseTopping.  Modifies the underlying ontology.
     */
    public GoatsCheeseTopping createGoatsCheeseTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GOATSCHEESETOPPING, DefaultGoatsCheeseTopping.class);
    }

    /**
     * Gets an instance of type GoatsCheeseTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GoatsCheeseTopping getGoatsCheeseTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GOATSCHEESETOPPING, DefaultGoatsCheeseTopping.class);
    }

    /**
     * Gets all instances of GoatsCheeseTopping from the ontology.
     */
    public Collection<? extends GoatsCheeseTopping> getAllGoatsCheeseToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GOATSCHEESETOPPING, DefaultGoatsCheeseTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#GorgonzolaTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#GorgonzolaTopping", GorgonzolaTopping.class, DefaultGorgonzolaTopping.class);
    }

    /**
     * Creates an instance of type GorgonzolaTopping.  Modifies the underlying ontology.
     */
    public GorgonzolaTopping createGorgonzolaTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GORGONZOLATOPPING, DefaultGorgonzolaTopping.class);
    }

    /**
     * Gets an instance of type GorgonzolaTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GorgonzolaTopping getGorgonzolaTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GORGONZOLATOPPING, DefaultGorgonzolaTopping.class);
    }

    /**
     * Gets all instances of GorgonzolaTopping from the ontology.
     */
    public Collection<? extends GorgonzolaTopping> getAllGorgonzolaToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GORGONZOLATOPPING, DefaultGorgonzolaTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#GreenPepperTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#GreenPepperTopping", GreenPepperTopping.class, DefaultGreenPepperTopping.class);
    }

    /**
     * Creates an instance of type GreenPepperTopping.  Modifies the underlying ontology.
     */
    public GreenPepperTopping createGreenPepperTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GREENPEPPERTOPPING, DefaultGreenPepperTopping.class);
    }

    /**
     * Gets an instance of type GreenPepperTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GreenPepperTopping getGreenPepperTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GREENPEPPERTOPPING, DefaultGreenPepperTopping.class);
    }

    /**
     * Gets all instances of GreenPepperTopping from the ontology.
     */
    public Collection<? extends GreenPepperTopping> getAllGreenPepperToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GREENPEPPERTOPPING, DefaultGreenPepperTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#HamTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#HamTopping", HamTopping.class, DefaultHamTopping.class);
    }

    /**
     * Creates an instance of type HamTopping.  Modifies the underlying ontology.
     */
    public HamTopping createHamTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAMTOPPING, DefaultHamTopping.class);
    }

    /**
     * Gets an instance of type HamTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HamTopping getHamTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAMTOPPING, DefaultHamTopping.class);
    }

    /**
     * Gets all instances of HamTopping from the ontology.
     */
    public Collection<? extends HamTopping> getAllHamToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAMTOPPING, DefaultHamTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#HerbSpiceTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#HerbSpiceTopping", HerbSpiceTopping.class, DefaultHerbSpiceTopping.class);
    }

    /**
     * Creates an instance of type HerbSpiceTopping.  Modifies the underlying ontology.
     */
    public HerbSpiceTopping createHerbSpiceTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HERBSPICETOPPING, DefaultHerbSpiceTopping.class);
    }

    /**
     * Gets an instance of type HerbSpiceTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HerbSpiceTopping getHerbSpiceTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HERBSPICETOPPING, DefaultHerbSpiceTopping.class);
    }

    /**
     * Gets all instances of HerbSpiceTopping from the ontology.
     */
    public Collection<? extends HerbSpiceTopping> getAllHerbSpiceToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HERBSPICETOPPING, DefaultHerbSpiceTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Hot
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Hot", Hot.class, DefaultHot.class);
    }

    /**
     * Creates an instance of type Hot.  Modifies the underlying ontology.
     */
    public Hot createHot(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOT, DefaultHot.class);
    }

    /**
     * Gets an instance of type Hot with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hot getHot(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOT, DefaultHot.class);
    }

    /**
     * Gets all instances of Hot from the ontology.
     */
    public Collection<? extends Hot> getAllHotInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOT, DefaultHot.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#HotGreenPepperTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#HotGreenPepperTopping", HotGreenPepperTopping.class, DefaultHotGreenPepperTopping.class);
    }

    /**
     * Creates an instance of type HotGreenPepperTopping.  Modifies the underlying ontology.
     */
    public HotGreenPepperTopping createHotGreenPepperTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOTGREENPEPPERTOPPING, DefaultHotGreenPepperTopping.class);
    }

    /**
     * Gets an instance of type HotGreenPepperTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HotGreenPepperTopping getHotGreenPepperTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOTGREENPEPPERTOPPING, DefaultHotGreenPepperTopping.class);
    }

    /**
     * Gets all instances of HotGreenPepperTopping from the ontology.
     */
    public Collection<? extends HotGreenPepperTopping> getAllHotGreenPepperToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOTGREENPEPPERTOPPING, DefaultHotGreenPepperTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#HotSpicedBeefTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#HotSpicedBeefTopping", HotSpicedBeefTopping.class, DefaultHotSpicedBeefTopping.class);
    }

    /**
     * Creates an instance of type HotSpicedBeefTopping.  Modifies the underlying ontology.
     */
    public HotSpicedBeefTopping createHotSpicedBeefTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOTSPICEDBEEFTOPPING, DefaultHotSpicedBeefTopping.class);
    }

    /**
     * Gets an instance of type HotSpicedBeefTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HotSpicedBeefTopping getHotSpicedBeefTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOTSPICEDBEEFTOPPING, DefaultHotSpicedBeefTopping.class);
    }

    /**
     * Gets all instances of HotSpicedBeefTopping from the ontology.
     */
    public Collection<? extends HotSpicedBeefTopping> getAllHotSpicedBeefToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOTSPICEDBEEFTOPPING, DefaultHotSpicedBeefTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#IceCream
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#IceCream", IceCream.class, DefaultIceCream.class);
    }

    /**
     * Creates an instance of type IceCream.  Modifies the underlying ontology.
     */
    public IceCream createIceCream(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ICECREAM, DefaultIceCream.class);
    }

    /**
     * Gets an instance of type IceCream with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IceCream getIceCream(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ICECREAM, DefaultIceCream.class);
    }

    /**
     * Gets all instances of IceCream from the ontology.
     */
    public Collection<? extends IceCream> getAllIceCreamInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ICECREAM, DefaultIceCream.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#InterestingPizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#InterestingPizza", InterestingPizza.class, DefaultInterestingPizza.class);
    }

    /**
     * Creates an instance of type InterestingPizza.  Modifies the underlying ontology.
     */
    public InterestingPizza createInterestingPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INTERESTINGPIZZA, DefaultInterestingPizza.class);
    }

    /**
     * Gets an instance of type InterestingPizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public InterestingPizza getInterestingPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INTERESTINGPIZZA, DefaultInterestingPizza.class);
    }

    /**
     * Gets all instances of InterestingPizza from the ontology.
     */
    public Collection<? extends InterestingPizza> getAllInterestingPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INTERESTINGPIZZA, DefaultInterestingPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#JalapenoPepperTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#JalapenoPepperTopping", JalapenoPepperTopping.class, DefaultJalapenoPepperTopping.class);
    }

    /**
     * Creates an instance of type JalapenoPepperTopping.  Modifies the underlying ontology.
     */
    public JalapenoPepperTopping createJalapenoPepperTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_JALAPENOPEPPERTOPPING, DefaultJalapenoPepperTopping.class);
    }

    /**
     * Gets an instance of type JalapenoPepperTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public JalapenoPepperTopping getJalapenoPepperTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_JALAPENOPEPPERTOPPING, DefaultJalapenoPepperTopping.class);
    }

    /**
     * Gets all instances of JalapenoPepperTopping from the ontology.
     */
    public Collection<? extends JalapenoPepperTopping> getAllJalapenoPepperToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_JALAPENOPEPPERTOPPING, DefaultJalapenoPepperTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#LaReine
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#LaReine", LaReine.class, DefaultLaReine.class);
    }

    /**
     * Creates an instance of type LaReine.  Modifies the underlying ontology.
     */
    public LaReine createLaReine(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LAREINE, DefaultLaReine.class);
    }

    /**
     * Gets an instance of type LaReine with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LaReine getLaReine(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LAREINE, DefaultLaReine.class);
    }

    /**
     * Gets all instances of LaReine from the ontology.
     */
    public Collection<? extends LaReine> getAllLaReineInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LAREINE, DefaultLaReine.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#LeekTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#LeekTopping", LeekTopping.class, DefaultLeekTopping.class);
    }

    /**
     * Creates an instance of type LeekTopping.  Modifies the underlying ontology.
     */
    public LeekTopping createLeekTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEEKTOPPING, DefaultLeekTopping.class);
    }

    /**
     * Gets an instance of type LeekTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LeekTopping getLeekTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEEKTOPPING, DefaultLeekTopping.class);
    }

    /**
     * Gets all instances of LeekTopping from the ontology.
     */
    public Collection<? extends LeekTopping> getAllLeekToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEEKTOPPING, DefaultLeekTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Margherita
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Margherita", Margherita.class, DefaultMargherita.class);
    }

    /**
     * Creates an instance of type Margherita.  Modifies the underlying ontology.
     */
    public Margherita createMargherita(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MARGHERITA, DefaultMargherita.class);
    }

    /**
     * Gets an instance of type Margherita with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Margherita getMargherita(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MARGHERITA, DefaultMargherita.class);
    }

    /**
     * Gets all instances of Margherita from the ontology.
     */
    public Collection<? extends Margherita> getAllMargheritaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MARGHERITA, DefaultMargherita.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#MeatTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#MeatTopping", MeatTopping.class, DefaultMeatTopping.class);
    }

    /**
     * Creates an instance of type MeatTopping.  Modifies the underlying ontology.
     */
    public MeatTopping createMeatTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEATTOPPING, DefaultMeatTopping.class);
    }

    /**
     * Gets an instance of type MeatTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeatTopping getMeatTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEATTOPPING, DefaultMeatTopping.class);
    }

    /**
     * Gets all instances of MeatTopping from the ontology.
     */
    public Collection<? extends MeatTopping> getAllMeatToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEATTOPPING, DefaultMeatTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#MeatyPizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#MeatyPizza", MeatyPizza.class, DefaultMeatyPizza.class);
    }

    /**
     * Creates an instance of type MeatyPizza.  Modifies the underlying ontology.
     */
    public MeatyPizza createMeatyPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEATYPIZZA, DefaultMeatyPizza.class);
    }

    /**
     * Gets an instance of type MeatyPizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeatyPizza getMeatyPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEATYPIZZA, DefaultMeatyPizza.class);
    }

    /**
     * Gets all instances of MeatyPizza from the ontology.
     */
    public Collection<? extends MeatyPizza> getAllMeatyPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEATYPIZZA, DefaultMeatyPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Medium
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Medium", Medium.class, DefaultMedium.class);
    }

    /**
     * Creates an instance of type Medium.  Modifies the underlying ontology.
     */
    public Medium createMedium(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEDIUM, DefaultMedium.class);
    }

    /**
     * Gets an instance of type Medium with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Medium getMedium(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEDIUM, DefaultMedium.class);
    }

    /**
     * Gets all instances of Medium from the ontology.
     */
    public Collection<? extends Medium> getAllMediumInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEDIUM, DefaultMedium.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Mild
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Mild", Mild.class, DefaultMild.class);
    }

    /**
     * Creates an instance of type Mild.  Modifies the underlying ontology.
     */
    public Mild createMild(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MILD, DefaultMild.class);
    }

    /**
     * Gets an instance of type Mild with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mild getMild(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MILD, DefaultMild.class);
    }

    /**
     * Gets all instances of Mild from the ontology.
     */
    public Collection<? extends Mild> getAllMildInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MILD, DefaultMild.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#MixedSeafoodTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#MixedSeafoodTopping", MixedSeafoodTopping.class, DefaultMixedSeafoodTopping.class);
    }

    /**
     * Creates an instance of type MixedSeafoodTopping.  Modifies the underlying ontology.
     */
    public MixedSeafoodTopping createMixedSeafoodTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MIXEDSEAFOODTOPPING, DefaultMixedSeafoodTopping.class);
    }

    /**
     * Gets an instance of type MixedSeafoodTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MixedSeafoodTopping getMixedSeafoodTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MIXEDSEAFOODTOPPING, DefaultMixedSeafoodTopping.class);
    }

    /**
     * Gets all instances of MixedSeafoodTopping from the ontology.
     */
    public Collection<? extends MixedSeafoodTopping> getAllMixedSeafoodToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MIXEDSEAFOODTOPPING, DefaultMixedSeafoodTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#MozzarellaTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#MozzarellaTopping", MozzarellaTopping.class, DefaultMozzarellaTopping.class);
    }

    /**
     * Creates an instance of type MozzarellaTopping.  Modifies the underlying ontology.
     */
    public MozzarellaTopping createMozzarellaTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOZZARELLATOPPING, DefaultMozzarellaTopping.class);
    }

    /**
     * Gets an instance of type MozzarellaTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MozzarellaTopping getMozzarellaTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOZZARELLATOPPING, DefaultMozzarellaTopping.class);
    }

    /**
     * Gets all instances of MozzarellaTopping from the ontology.
     */
    public Collection<? extends MozzarellaTopping> getAllMozzarellaToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOZZARELLATOPPING, DefaultMozzarellaTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Mushroom
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Mushroom", Mushroom.class, DefaultMushroom.class);
    }

    /**
     * Creates an instance of type Mushroom.  Modifies the underlying ontology.
     */
    public Mushroom createMushroom(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MUSHROOM, DefaultMushroom.class);
    }

    /**
     * Gets an instance of type Mushroom with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mushroom getMushroom(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MUSHROOM, DefaultMushroom.class);
    }

    /**
     * Gets all instances of Mushroom from the ontology.
     */
    public Collection<? extends Mushroom> getAllMushroomInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MUSHROOM, DefaultMushroom.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#MushroomTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#MushroomTopping", MushroomTopping.class, DefaultMushroomTopping.class);
    }

    /**
     * Creates an instance of type MushroomTopping.  Modifies the underlying ontology.
     */
    public MushroomTopping createMushroomTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MUSHROOMTOPPING, DefaultMushroomTopping.class);
    }

    /**
     * Gets an instance of type MushroomTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MushroomTopping getMushroomTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MUSHROOMTOPPING, DefaultMushroomTopping.class);
    }

    /**
     * Gets all instances of MushroomTopping from the ontology.
     */
    public Collection<? extends MushroomTopping> getAllMushroomToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MUSHROOMTOPPING, DefaultMushroomTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#NamedPizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#NamedPizza", NamedPizza.class, DefaultNamedPizza.class);
    }

    /**
     * Creates an instance of type NamedPizza.  Modifies the underlying ontology.
     */
    public NamedPizza createNamedPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NAMEDPIZZA, DefaultNamedPizza.class);
    }

    /**
     * Gets an instance of type NamedPizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NamedPizza getNamedPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NAMEDPIZZA, DefaultNamedPizza.class);
    }

    /**
     * Gets all instances of NamedPizza from the ontology.
     */
    public Collection<? extends NamedPizza> getAllNamedPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NAMEDPIZZA, DefaultNamedPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Napoletana
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Napoletana", Napoletana.class, DefaultNapoletana.class);
    }

    /**
     * Creates an instance of type Napoletana.  Modifies the underlying ontology.
     */
    public Napoletana createNapoletana(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NAPOLETANA, DefaultNapoletana.class);
    }

    /**
     * Gets an instance of type Napoletana with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Napoletana getNapoletana(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NAPOLETANA, DefaultNapoletana.class);
    }

    /**
     * Gets all instances of Napoletana from the ontology.
     */
    public Collection<? extends Napoletana> getAllNapoletanaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NAPOLETANA, DefaultNapoletana.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#NonVegetarianPizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#NonVegetarianPizza", NonVegetarianPizza.class, DefaultNonVegetarianPizza.class);
    }

    /**
     * Creates an instance of type NonVegetarianPizza.  Modifies the underlying ontology.
     */
    public NonVegetarianPizza createNonVegetarianPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NONVEGETARIANPIZZA, DefaultNonVegetarianPizza.class);
    }

    /**
     * Gets an instance of type NonVegetarianPizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NonVegetarianPizza getNonVegetarianPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NONVEGETARIANPIZZA, DefaultNonVegetarianPizza.class);
    }

    /**
     * Gets all instances of NonVegetarianPizza from the ontology.
     */
    public Collection<? extends NonVegetarianPizza> getAllNonVegetarianPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NONVEGETARIANPIZZA, DefaultNonVegetarianPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#NutTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#NutTopping", NutTopping.class, DefaultNutTopping.class);
    }

    /**
     * Creates an instance of type NutTopping.  Modifies the underlying ontology.
     */
    public NutTopping createNutTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NUTTOPPING, DefaultNutTopping.class);
    }

    /**
     * Gets an instance of type NutTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NutTopping getNutTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NUTTOPPING, DefaultNutTopping.class);
    }

    /**
     * Gets all instances of NutTopping from the ontology.
     */
    public Collection<? extends NutTopping> getAllNutToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NUTTOPPING, DefaultNutTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#OliveTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#OliveTopping", OliveTopping.class, DefaultOliveTopping.class);
    }

    /**
     * Creates an instance of type OliveTopping.  Modifies the underlying ontology.
     */
    public OliveTopping createOliveTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OLIVETOPPING, DefaultOliveTopping.class);
    }

    /**
     * Gets an instance of type OliveTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OliveTopping getOliveTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OLIVETOPPING, DefaultOliveTopping.class);
    }

    /**
     * Gets all instances of OliveTopping from the ontology.
     */
    public Collection<? extends OliveTopping> getAllOliveToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OLIVETOPPING, DefaultOliveTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#OnionTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#OnionTopping", OnionTopping.class, DefaultOnionTopping.class);
    }

    /**
     * Creates an instance of type OnionTopping.  Modifies the underlying ontology.
     */
    public OnionTopping createOnionTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ONIONTOPPING, DefaultOnionTopping.class);
    }

    /**
     * Gets an instance of type OnionTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OnionTopping getOnionTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ONIONTOPPING, DefaultOnionTopping.class);
    }

    /**
     * Gets all instances of OnionTopping from the ontology.
     */
    public Collection<? extends OnionTopping> getAllOnionToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ONIONTOPPING, DefaultOnionTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#ParmaHamTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#ParmaHamTopping", ParmaHamTopping.class, DefaultParmaHamTopping.class);
    }

    /**
     * Creates an instance of type ParmaHamTopping.  Modifies the underlying ontology.
     */
    public ParmaHamTopping createParmaHamTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PARMAHAMTOPPING, DefaultParmaHamTopping.class);
    }

    /**
     * Gets an instance of type ParmaHamTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ParmaHamTopping getParmaHamTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PARMAHAMTOPPING, DefaultParmaHamTopping.class);
    }

    /**
     * Gets all instances of ParmaHamTopping from the ontology.
     */
    public Collection<? extends ParmaHamTopping> getAllParmaHamToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PARMAHAMTOPPING, DefaultParmaHamTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Parmense
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Parmense", Parmense.class, DefaultParmense.class);
    }

    /**
     * Creates an instance of type Parmense.  Modifies the underlying ontology.
     */
    public Parmense createParmense(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PARMENSE, DefaultParmense.class);
    }

    /**
     * Gets an instance of type Parmense with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Parmense getParmense(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PARMENSE, DefaultParmense.class);
    }

    /**
     * Gets all instances of Parmense from the ontology.
     */
    public Collection<? extends Parmense> getAllParmenseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PARMENSE, DefaultParmense.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#ParmesanTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#ParmesanTopping", ParmezanTopping.class, DefaultParmezanTopping.class);
    }

    /**
     * Creates an instance of type ParmezanTopping.  Modifies the underlying ontology.
     */
    public ParmezanTopping createParmezanTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PARMEZANTOPPING, DefaultParmezanTopping.class);
    }

    /**
     * Gets an instance of type ParmezanTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ParmezanTopping getParmezanTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PARMEZANTOPPING, DefaultParmezanTopping.class);
    }

    /**
     * Gets all instances of ParmezanTopping from the ontology.
     */
    public Collection<? extends ParmezanTopping> getAllParmezanToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PARMEZANTOPPING, DefaultParmezanTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#PeperonataTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#PeperonataTopping", PeperonataTopping.class, DefaultPeperonataTopping.class);
    }

    /**
     * Creates an instance of type PeperonataTopping.  Modifies the underlying ontology.
     */
    public PeperonataTopping createPeperonataTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PEPERONATATOPPING, DefaultPeperonataTopping.class);
    }

    /**
     * Gets an instance of type PeperonataTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PeperonataTopping getPeperonataTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PEPERONATATOPPING, DefaultPeperonataTopping.class);
    }

    /**
     * Gets all instances of PeperonataTopping from the ontology.
     */
    public Collection<? extends PeperonataTopping> getAllPeperonataToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PEPERONATATOPPING, DefaultPeperonataTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#PeperoniSausageTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#PeperoniSausageTopping", PeperoniSausageTopping.class, DefaultPeperoniSausageTopping.class);
    }

    /**
     * Creates an instance of type PeperoniSausageTopping.  Modifies the underlying ontology.
     */
    public PeperoniSausageTopping createPeperoniSausageTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PEPERONISAUSAGETOPPING, DefaultPeperoniSausageTopping.class);
    }

    /**
     * Gets an instance of type PeperoniSausageTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PeperoniSausageTopping getPeperoniSausageTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PEPERONISAUSAGETOPPING, DefaultPeperoniSausageTopping.class);
    }

    /**
     * Gets all instances of PeperoniSausageTopping from the ontology.
     */
    public Collection<? extends PeperoniSausageTopping> getAllPeperoniSausageToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PEPERONISAUSAGETOPPING, DefaultPeperoniSausageTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#PepperTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#PepperTopping", PepperTopping.class, DefaultPepperTopping.class);
    }

    /**
     * Creates an instance of type PepperTopping.  Modifies the underlying ontology.
     */
    public PepperTopping createPepperTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PEPPERTOPPING, DefaultPepperTopping.class);
    }

    /**
     * Gets an instance of type PepperTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PepperTopping getPepperTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PEPPERTOPPING, DefaultPepperTopping.class);
    }

    /**
     * Gets all instances of PepperTopping from the ontology.
     */
    public Collection<? extends PepperTopping> getAllPepperToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PEPPERTOPPING, DefaultPepperTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#PetitPoisTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#PetitPoisTopping", PetitPoisTopping.class, DefaultPetitPoisTopping.class);
    }

    /**
     * Creates an instance of type PetitPoisTopping.  Modifies the underlying ontology.
     */
    public PetitPoisTopping createPetitPoisTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PETITPOISTOPPING, DefaultPetitPoisTopping.class);
    }

    /**
     * Gets an instance of type PetitPoisTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PetitPoisTopping getPetitPoisTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PETITPOISTOPPING, DefaultPetitPoisTopping.class);
    }

    /**
     * Gets all instances of PetitPoisTopping from the ontology.
     */
    public Collection<? extends PetitPoisTopping> getAllPetitPoisToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PETITPOISTOPPING, DefaultPetitPoisTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#PineKernels
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#PineKernels", PineKernelTopping.class, DefaultPineKernelTopping.class);
    }

    /**
     * Creates an instance of type PineKernelTopping.  Modifies the underlying ontology.
     */
    public PineKernelTopping createPineKernelTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PINEKERNELTOPPING, DefaultPineKernelTopping.class);
    }

    /**
     * Gets an instance of type PineKernelTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PineKernelTopping getPineKernelTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PINEKERNELTOPPING, DefaultPineKernelTopping.class);
    }

    /**
     * Gets all instances of PineKernelTopping from the ontology.
     */
    public Collection<? extends PineKernelTopping> getAllPineKernelToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PINEKERNELTOPPING, DefaultPineKernelTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Pizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Pizza", Pizza.class, DefaultPizza.class);
    }

    /**
     * Creates an instance of type Pizza.  Modifies the underlying ontology.
     */
    public Pizza createPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PIZZA, DefaultPizza.class);
    }

    /**
     * Gets an instance of type Pizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pizza getPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PIZZA, DefaultPizza.class);
    }

    /**
     * Gets all instances of Pizza from the ontology.
     */
    public Collection<? extends Pizza> getAllPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PIZZA, DefaultPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#PizzaBase
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#PizzaBase", PizzaBase.class, DefaultPizzaBase.class);
    }

    /**
     * Creates an instance of type PizzaBase.  Modifies the underlying ontology.
     */
    public PizzaBase createPizzaBase(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PIZZABASE, DefaultPizzaBase.class);
    }

    /**
     * Gets an instance of type PizzaBase with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PizzaBase getPizzaBase(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PIZZABASE, DefaultPizzaBase.class);
    }

    /**
     * Gets all instances of PizzaBase from the ontology.
     */
    public Collection<? extends PizzaBase> getAllPizzaBaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PIZZABASE, DefaultPizzaBase.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#PizzaTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#PizzaTopping", PizzaTopping.class, DefaultPizzaTopping.class);
    }

    /**
     * Creates an instance of type PizzaTopping.  Modifies the underlying ontology.
     */
    public PizzaTopping createPizzaTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PIZZATOPPING, DefaultPizzaTopping.class);
    }

    /**
     * Gets an instance of type PizzaTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PizzaTopping getPizzaTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PIZZATOPPING, DefaultPizzaTopping.class);
    }

    /**
     * Gets all instances of PizzaTopping from the ontology.
     */
    public Collection<? extends PizzaTopping> getAllPizzaToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PIZZATOPPING, DefaultPizzaTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#PolloAdAstra
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#PolloAdAstra", PolloAdAstra.class, DefaultPolloAdAstra.class);
    }

    /**
     * Creates an instance of type PolloAdAstra.  Modifies the underlying ontology.
     */
    public PolloAdAstra createPolloAdAstra(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POLLOADASTRA, DefaultPolloAdAstra.class);
    }

    /**
     * Gets an instance of type PolloAdAstra with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PolloAdAstra getPolloAdAstra(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POLLOADASTRA, DefaultPolloAdAstra.class);
    }

    /**
     * Gets all instances of PolloAdAstra from the ontology.
     */
    public Collection<? extends PolloAdAstra> getAllPolloAdAstraInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POLLOADASTRA, DefaultPolloAdAstra.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#PrawnsTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#PrawnsTopping", PrawnsTopping.class, DefaultPrawnsTopping.class);
    }

    /**
     * Creates an instance of type PrawnsTopping.  Modifies the underlying ontology.
     */
    public PrawnsTopping createPrawnsTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRAWNSTOPPING, DefaultPrawnsTopping.class);
    }

    /**
     * Gets an instance of type PrawnsTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PrawnsTopping getPrawnsTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRAWNSTOPPING, DefaultPrawnsTopping.class);
    }

    /**
     * Gets all instances of PrawnsTopping from the ontology.
     */
    public Collection<? extends PrawnsTopping> getAllPrawnsToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRAWNSTOPPING, DefaultPrawnsTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#PrinceCarlo
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#PrinceCarlo", PrinceCarlo.class, DefaultPrinceCarlo.class);
    }

    /**
     * Creates an instance of type PrinceCarlo.  Modifies the underlying ontology.
     */
    public PrinceCarlo createPrinceCarlo(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRINCECARLO, DefaultPrinceCarlo.class);
    }

    /**
     * Gets an instance of type PrinceCarlo with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PrinceCarlo getPrinceCarlo(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRINCECARLO, DefaultPrinceCarlo.class);
    }

    /**
     * Gets all instances of PrinceCarlo from the ontology.
     */
    public Collection<? extends PrinceCarlo> getAllPrinceCarloInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRINCECARLO, DefaultPrinceCarlo.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#QuattroFormaggi
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#QuattroFormaggi", QuattroFormaggi.class, DefaultQuattroFormaggi.class);
    }

    /**
     * Creates an instance of type QuattroFormaggi.  Modifies the underlying ontology.
     */
    public QuattroFormaggi createQuattroFormaggi(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QUATTROFORMAGGI, DefaultQuattroFormaggi.class);
    }

    /**
     * Gets an instance of type QuattroFormaggi with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public QuattroFormaggi getQuattroFormaggi(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QUATTROFORMAGGI, DefaultQuattroFormaggi.class);
    }

    /**
     * Gets all instances of QuattroFormaggi from the ontology.
     */
    public Collection<? extends QuattroFormaggi> getAllQuattroFormaggiInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QUATTROFORMAGGI, DefaultQuattroFormaggi.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#RealItalianPizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#RealItalianPizza", RealItalianPizza.class, DefaultRealItalianPizza.class);
    }

    /**
     * Creates an instance of type RealItalianPizza.  Modifies the underlying ontology.
     */
    public RealItalianPizza createRealItalianPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REALITALIANPIZZA, DefaultRealItalianPizza.class);
    }

    /**
     * Gets an instance of type RealItalianPizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RealItalianPizza getRealItalianPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REALITALIANPIZZA, DefaultRealItalianPizza.class);
    }

    /**
     * Gets all instances of RealItalianPizza from the ontology.
     */
    public Collection<? extends RealItalianPizza> getAllRealItalianPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REALITALIANPIZZA, DefaultRealItalianPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#RedOnionTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#RedOnionTopping", RedOnionTopping.class, DefaultRedOnionTopping.class);
    }

    /**
     * Creates an instance of type RedOnionTopping.  Modifies the underlying ontology.
     */
    public RedOnionTopping createRedOnionTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REDONIONTOPPING, DefaultRedOnionTopping.class);
    }

    /**
     * Gets an instance of type RedOnionTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RedOnionTopping getRedOnionTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REDONIONTOPPING, DefaultRedOnionTopping.class);
    }

    /**
     * Gets all instances of RedOnionTopping from the ontology.
     */
    public Collection<? extends RedOnionTopping> getAllRedOnionToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REDONIONTOPPING, DefaultRedOnionTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#RocketTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#RocketTopping", RocketTopping.class, DefaultRocketTopping.class);
    }

    /**
     * Creates an instance of type RocketTopping.  Modifies the underlying ontology.
     */
    public RocketTopping createRocketTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROCKETTOPPING, DefaultRocketTopping.class);
    }

    /**
     * Gets an instance of type RocketTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RocketTopping getRocketTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROCKETTOPPING, DefaultRocketTopping.class);
    }

    /**
     * Gets all instances of RocketTopping from the ontology.
     */
    public Collection<? extends RocketTopping> getAllRocketToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROCKETTOPPING, DefaultRocketTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Rosa
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Rosa", Rosa.class, DefaultRosa.class);
    }

    /**
     * Creates an instance of type Rosa.  Modifies the underlying ontology.
     */
    public Rosa createRosa(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROSA, DefaultRosa.class);
    }

    /**
     * Gets an instance of type Rosa with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Rosa getRosa(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROSA, DefaultRosa.class);
    }

    /**
     * Gets all instances of Rosa from the ontology.
     */
    public Collection<? extends Rosa> getAllRosaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROSA, DefaultRosa.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#RosemaryTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#RosemaryTopping", RosemaryTopping.class, DefaultRosemaryTopping.class);
    }

    /**
     * Creates an instance of type RosemaryTopping.  Modifies the underlying ontology.
     */
    public RosemaryTopping createRosemaryTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROSEMARYTOPPING, DefaultRosemaryTopping.class);
    }

    /**
     * Gets an instance of type RosemaryTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RosemaryTopping getRosemaryTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROSEMARYTOPPING, DefaultRosemaryTopping.class);
    }

    /**
     * Gets all instances of RosemaryTopping from the ontology.
     */
    public Collection<? extends RosemaryTopping> getAllRosemaryToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROSEMARYTOPPING, DefaultRosemaryTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#SauceTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#SauceTopping", SauceTopping.class, DefaultSauceTopping.class);
    }

    /**
     * Creates an instance of type SauceTopping.  Modifies the underlying ontology.
     */
    public SauceTopping createSauceTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SAUCETOPPING, DefaultSauceTopping.class);
    }

    /**
     * Gets an instance of type SauceTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SauceTopping getSauceTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SAUCETOPPING, DefaultSauceTopping.class);
    }

    /**
     * Gets all instances of SauceTopping from the ontology.
     */
    public Collection<? extends SauceTopping> getAllSauceToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SAUCETOPPING, DefaultSauceTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Siciliana
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Siciliana", Siciliana.class, DefaultSiciliana.class);
    }

    /**
     * Creates an instance of type Siciliana.  Modifies the underlying ontology.
     */
    public Siciliana createSiciliana(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SICILIANA, DefaultSiciliana.class);
    }

    /**
     * Gets an instance of type Siciliana with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Siciliana getSiciliana(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SICILIANA, DefaultSiciliana.class);
    }

    /**
     * Gets all instances of Siciliana from the ontology.
     */
    public Collection<? extends Siciliana> getAllSicilianaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SICILIANA, DefaultSiciliana.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#SlicedTomatoTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#SlicedTomatoTopping", SlicedTomatoTopping.class, DefaultSlicedTomatoTopping.class);
    }

    /**
     * Creates an instance of type SlicedTomatoTopping.  Modifies the underlying ontology.
     */
    public SlicedTomatoTopping createSlicedTomatoTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SLICEDTOMATOTOPPING, DefaultSlicedTomatoTopping.class);
    }

    /**
     * Gets an instance of type SlicedTomatoTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SlicedTomatoTopping getSlicedTomatoTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SLICEDTOMATOTOPPING, DefaultSlicedTomatoTopping.class);
    }

    /**
     * Gets all instances of SlicedTomatoTopping from the ontology.
     */
    public Collection<? extends SlicedTomatoTopping> getAllSlicedTomatoToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SLICEDTOMATOTOPPING, DefaultSlicedTomatoTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#SloppyGiuseppe
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#SloppyGiuseppe", SloppyGiuseppe.class, DefaultSloppyGiuseppe.class);
    }

    /**
     * Creates an instance of type SloppyGiuseppe.  Modifies the underlying ontology.
     */
    public SloppyGiuseppe createSloppyGiuseppe(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SLOPPYGIUSEPPE, DefaultSloppyGiuseppe.class);
    }

    /**
     * Gets an instance of type SloppyGiuseppe with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SloppyGiuseppe getSloppyGiuseppe(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SLOPPYGIUSEPPE, DefaultSloppyGiuseppe.class);
    }

    /**
     * Gets all instances of SloppyGiuseppe from the ontology.
     */
    public Collection<? extends SloppyGiuseppe> getAllSloppyGiuseppeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SLOPPYGIUSEPPE, DefaultSloppyGiuseppe.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Soho
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Soho", Soho.class, DefaultSoho.class);
    }

    /**
     * Creates an instance of type Soho.  Modifies the underlying ontology.
     */
    public Soho createSoho(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOHO, DefaultSoho.class);
    }

    /**
     * Gets an instance of type Soho with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Soho getSoho(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOHO, DefaultSoho.class);
    }

    /**
     * Gets all instances of Soho from the ontology.
     */
    public Collection<? extends Soho> getAllSohoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOHO, DefaultSoho.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Spiciness
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Spiciness", Spiciness.class, DefaultSpiciness.class);
    }

    /**
     * Creates an instance of type Spiciness.  Modifies the underlying ontology.
     */
    public Spiciness createSpiciness(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPICINESS, DefaultSpiciness.class);
    }

    /**
     * Gets an instance of type Spiciness with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Spiciness getSpiciness(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPICINESS, DefaultSpiciness.class);
    }

    /**
     * Gets all instances of Spiciness from the ontology.
     */
    public Collection<? extends Spiciness> getAllSpicinessInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPICINESS, DefaultSpiciness.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#SpicyPizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#SpicyPizza", SpicyPizza.class, DefaultSpicyPizza.class);
    }

    /**
     * Creates an instance of type SpicyPizza.  Modifies the underlying ontology.
     */
    public SpicyPizza createSpicyPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPICYPIZZA, DefaultSpicyPizza.class);
    }

    /**
     * Gets an instance of type SpicyPizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpicyPizza getSpicyPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPICYPIZZA, DefaultSpicyPizza.class);
    }

    /**
     * Gets all instances of SpicyPizza from the ontology.
     */
    public Collection<? extends SpicyPizza> getAllSpicyPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPICYPIZZA, DefaultSpicyPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#SpicyPizzaEquivalent
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#SpicyPizzaEquivalent", SpicyPizzaEquivalent.class, DefaultSpicyPizzaEquivalent.class);
    }

    /**
     * Creates an instance of type SpicyPizzaEquivalent.  Modifies the underlying ontology.
     */
    public SpicyPizzaEquivalent createSpicyPizzaEquivalent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPICYPIZZAEQUIVALENT, DefaultSpicyPizzaEquivalent.class);
    }

    /**
     * Gets an instance of type SpicyPizzaEquivalent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpicyPizzaEquivalent getSpicyPizzaEquivalent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPICYPIZZAEQUIVALENT, DefaultSpicyPizzaEquivalent.class);
    }

    /**
     * Gets all instances of SpicyPizzaEquivalent from the ontology.
     */
    public Collection<? extends SpicyPizzaEquivalent> getAllSpicyPizzaEquivalentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPICYPIZZAEQUIVALENT, DefaultSpicyPizzaEquivalent.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#SpicyTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#SpicyTopping", SpicyTopping.class, DefaultSpicyTopping.class);
    }

    /**
     * Creates an instance of type SpicyTopping.  Modifies the underlying ontology.
     */
    public SpicyTopping createSpicyTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPICYTOPPING, DefaultSpicyTopping.class);
    }

    /**
     * Gets an instance of type SpicyTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpicyTopping getSpicyTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPICYTOPPING, DefaultSpicyTopping.class);
    }

    /**
     * Gets all instances of SpicyTopping from the ontology.
     */
    public Collection<? extends SpicyTopping> getAllSpicyToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPICYTOPPING, DefaultSpicyTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#SpinachTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#SpinachTopping", SpinachTopping.class, DefaultSpinachTopping.class);
    }

    /**
     * Creates an instance of type SpinachTopping.  Modifies the underlying ontology.
     */
    public SpinachTopping createSpinachTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPINACHTOPPING, DefaultSpinachTopping.class);
    }

    /**
     * Gets an instance of type SpinachTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpinachTopping getSpinachTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPINACHTOPPING, DefaultSpinachTopping.class);
    }

    /**
     * Gets all instances of SpinachTopping from the ontology.
     */
    public Collection<? extends SpinachTopping> getAllSpinachToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPINACHTOPPING, DefaultSpinachTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#SultanaTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#SultanaTopping", SultanaTopping.class, DefaultSultanaTopping.class);
    }

    /**
     * Creates an instance of type SultanaTopping.  Modifies the underlying ontology.
     */
    public SultanaTopping createSultanaTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SULTANATOPPING, DefaultSultanaTopping.class);
    }

    /**
     * Gets an instance of type SultanaTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SultanaTopping getSultanaTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SULTANATOPPING, DefaultSultanaTopping.class);
    }

    /**
     * Gets all instances of SultanaTopping from the ontology.
     */
    public Collection<? extends SultanaTopping> getAllSultanaToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SULTANATOPPING, DefaultSultanaTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#SundriedTomatoTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#SundriedTomatoTopping", SundriedTomatoTopping.class, DefaultSundriedTomatoTopping.class);
    }

    /**
     * Creates an instance of type SundriedTomatoTopping.  Modifies the underlying ontology.
     */
    public SundriedTomatoTopping createSundriedTomatoTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUNDRIEDTOMATOTOPPING, DefaultSundriedTomatoTopping.class);
    }

    /**
     * Gets an instance of type SundriedTomatoTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SundriedTomatoTopping getSundriedTomatoTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUNDRIEDTOMATOTOPPING, DefaultSundriedTomatoTopping.class);
    }

    /**
     * Gets all instances of SundriedTomatoTopping from the ontology.
     */
    public Collection<? extends SundriedTomatoTopping> getAllSundriedTomatoToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUNDRIEDTOMATOTOPPING, DefaultSundriedTomatoTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#SweetPepperTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#SweetPepperTopping", SweetPepperTopping.class, DefaultSweetPepperTopping.class);
    }

    /**
     * Creates an instance of type SweetPepperTopping.  Modifies the underlying ontology.
     */
    public SweetPepperTopping createSweetPepperTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SWEETPEPPERTOPPING, DefaultSweetPepperTopping.class);
    }

    /**
     * Gets an instance of type SweetPepperTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SweetPepperTopping getSweetPepperTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SWEETPEPPERTOPPING, DefaultSweetPepperTopping.class);
    }

    /**
     * Gets all instances of SweetPepperTopping from the ontology.
     */
    public Collection<? extends SweetPepperTopping> getAllSweetPepperToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SWEETPEPPERTOPPING, DefaultSweetPepperTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#ThinAndCrispyBase
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#ThinAndCrispyBase", ThinAndCrispyBase.class, DefaultThinAndCrispyBase.class);
    }

    /**
     * Creates an instance of type ThinAndCrispyBase.  Modifies the underlying ontology.
     */
    public ThinAndCrispyBase createThinAndCrispyBase(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THINANDCRISPYBASE, DefaultThinAndCrispyBase.class);
    }

    /**
     * Gets an instance of type ThinAndCrispyBase with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ThinAndCrispyBase getThinAndCrispyBase(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THINANDCRISPYBASE, DefaultThinAndCrispyBase.class);
    }

    /**
     * Gets all instances of ThinAndCrispyBase from the ontology.
     */
    public Collection<? extends ThinAndCrispyBase> getAllThinAndCrispyBaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THINANDCRISPYBASE, DefaultThinAndCrispyBase.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#ThinAndCrispyPizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#ThinAndCrispyPizza", ThinAndCrispyPizza.class, DefaultThinAndCrispyPizza.class);
    }

    /**
     * Creates an instance of type ThinAndCrispyPizza.  Modifies the underlying ontology.
     */
    public ThinAndCrispyPizza createThinAndCrispyPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THINANDCRISPYPIZZA, DefaultThinAndCrispyPizza.class);
    }

    /**
     * Gets an instance of type ThinAndCrispyPizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ThinAndCrispyPizza getThinAndCrispyPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THINANDCRISPYPIZZA, DefaultThinAndCrispyPizza.class);
    }

    /**
     * Gets all instances of ThinAndCrispyPizza from the ontology.
     */
    public Collection<? extends ThinAndCrispyPizza> getAllThinAndCrispyPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THINANDCRISPYPIZZA, DefaultThinAndCrispyPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#TobascoPepperSauce
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#TobascoPepperSauce", TobascoPepperSauceTopping.class, DefaultTobascoPepperSauceTopping.class);
    }

    /**
     * Creates an instance of type TobascoPepperSauceTopping.  Modifies the underlying ontology.
     */
    public TobascoPepperSauceTopping createTobascoPepperSauceTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TOBASCOPEPPERSAUCETOPPING, DefaultTobascoPepperSauceTopping.class);
    }

    /**
     * Gets an instance of type TobascoPepperSauceTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TobascoPepperSauceTopping getTobascoPepperSauceTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TOBASCOPEPPERSAUCETOPPING, DefaultTobascoPepperSauceTopping.class);
    }

    /**
     * Gets all instances of TobascoPepperSauceTopping from the ontology.
     */
    public Collection<? extends TobascoPepperSauceTopping> getAllTobascoPepperSauceToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TOBASCOPEPPERSAUCETOPPING, DefaultTobascoPepperSauceTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#TomatoTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#TomatoTopping", TomatoTopping.class, DefaultTomatoTopping.class);
    }

    /**
     * Creates an instance of type TomatoTopping.  Modifies the underlying ontology.
     */
    public TomatoTopping createTomatoTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TOMATOTOPPING, DefaultTomatoTopping.class);
    }

    /**
     * Gets an instance of type TomatoTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TomatoTopping getTomatoTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TOMATOTOPPING, DefaultTomatoTopping.class);
    }

    /**
     * Gets all instances of TomatoTopping from the ontology.
     */
    public Collection<? extends TomatoTopping> getAllTomatoToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TOMATOTOPPING, DefaultTomatoTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#UnclosedPizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#UnclosedPizza", UnclosedPizza.class, DefaultUnclosedPizza.class);
    }

    /**
     * Creates an instance of type UnclosedPizza.  Modifies the underlying ontology.
     */
    public UnclosedPizza createUnclosedPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UNCLOSEDPIZZA, DefaultUnclosedPizza.class);
    }

    /**
     * Gets an instance of type UnclosedPizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UnclosedPizza getUnclosedPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UNCLOSEDPIZZA, DefaultUnclosedPizza.class);
    }

    /**
     * Gets all instances of UnclosedPizza from the ontology.
     */
    public Collection<? extends UnclosedPizza> getAllUnclosedPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UNCLOSEDPIZZA, DefaultUnclosedPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#ValuePartition
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#ValuePartition", ValuePartition.class, DefaultValuePartition.class);
    }

    /**
     * Creates an instance of type ValuePartition.  Modifies the underlying ontology.
     */
    public ValuePartition createValuePartition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VALUEPARTITION, DefaultValuePartition.class);
    }

    /**
     * Gets an instance of type ValuePartition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ValuePartition getValuePartition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VALUEPARTITION, DefaultValuePartition.class);
    }

    /**
     * Gets all instances of ValuePartition from the ontology.
     */
    public Collection<? extends ValuePartition> getAllValuePartitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VALUEPARTITION, DefaultValuePartition.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#VegetableTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#VegetableTopping", VegetableTopping.class, DefaultVegetableTopping.class);
    }

    /**
     * Creates an instance of type VegetableTopping.  Modifies the underlying ontology.
     */
    public VegetableTopping createVegetableTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VEGETABLETOPPING, DefaultVegetableTopping.class);
    }

    /**
     * Gets an instance of type VegetableTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VegetableTopping getVegetableTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VEGETABLETOPPING, DefaultVegetableTopping.class);
    }

    /**
     * Gets all instances of VegetableTopping from the ontology.
     */
    public Collection<? extends VegetableTopping> getAllVegetableToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VEGETABLETOPPING, DefaultVegetableTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#VegetarianPizza
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#VegetarianPizza", VegetarianPizza.class, DefaultVegetarianPizza.class);
    }

    /**
     * Creates an instance of type VegetarianPizza.  Modifies the underlying ontology.
     */
    public VegetarianPizza createVegetarianPizza(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VEGETARIANPIZZA, DefaultVegetarianPizza.class);
    }

    /**
     * Gets an instance of type VegetarianPizza with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VegetarianPizza getVegetarianPizza(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VEGETARIANPIZZA, DefaultVegetarianPizza.class);
    }

    /**
     * Gets all instances of VegetarianPizza from the ontology.
     */
    public Collection<? extends VegetarianPizza> getAllVegetarianPizzaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VEGETARIANPIZZA, DefaultVegetarianPizza.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#VegetarianPizzaEquivalent1
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#VegetarianPizzaEquivalent1", VegetarianPizza1.class, DefaultVegetarianPizza1.class);
    }

    /**
     * Creates an instance of type VegetarianPizza1.  Modifies the underlying ontology.
     */
    public VegetarianPizza1 createVegetarianPizza1(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VEGETARIANPIZZA1, DefaultVegetarianPizza1.class);
    }

    /**
     * Gets an instance of type VegetarianPizza1 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VegetarianPizza1 getVegetarianPizza1(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VEGETARIANPIZZA1, DefaultVegetarianPizza1.class);
    }

    /**
     * Gets all instances of VegetarianPizza1 from the ontology.
     */
    public Collection<? extends VegetarianPizza1> getAllVegetarianPizza1Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VEGETARIANPIZZA1, DefaultVegetarianPizza1.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#VegetarianPizzaEquivalent2
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#VegetarianPizzaEquivalent2", VegetarianPizza2.class, DefaultVegetarianPizza2.class);
    }

    /**
     * Creates an instance of type VegetarianPizza2.  Modifies the underlying ontology.
     */
    public VegetarianPizza2 createVegetarianPizza2(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VEGETARIANPIZZA2, DefaultVegetarianPizza2.class);
    }

    /**
     * Gets an instance of type VegetarianPizza2 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VegetarianPizza2 getVegetarianPizza2(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VEGETARIANPIZZA2, DefaultVegetarianPizza2.class);
    }

    /**
     * Gets all instances of VegetarianPizza2 from the ontology.
     */
    public Collection<? extends VegetarianPizza2> getAllVegetarianPizza2Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VEGETARIANPIZZA2, DefaultVegetarianPizza2.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#VegetarianTopping
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#VegetarianTopping", VegetarianTopping.class, DefaultVegetarianTopping.class);
    }

    /**
     * Creates an instance of type VegetarianTopping.  Modifies the underlying ontology.
     */
    public VegetarianTopping createVegetarianTopping(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VEGETARIANTOPPING, DefaultVegetarianTopping.class);
    }

    /**
     * Gets an instance of type VegetarianTopping with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VegetarianTopping getVegetarianTopping(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VEGETARIANTOPPING, DefaultVegetarianTopping.class);
    }

    /**
     * Gets all instances of VegetarianTopping from the ontology.
     */
    public Collection<? extends VegetarianTopping> getAllVegetarianToppingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VEGETARIANTOPPING, DefaultVegetarianTopping.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Veneziana
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Veneziana", Veneziana.class, DefaultVeneziana.class);
    }

    /**
     * Creates an instance of type Veneziana.  Modifies the underlying ontology.
     */
    public Veneziana createVeneziana(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VENEZIANA, DefaultVeneziana.class);
    }

    /**
     * Gets an instance of type Veneziana with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Veneziana getVeneziana(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VENEZIANA, DefaultVeneziana.class);
    }

    /**
     * Gets all instances of Veneziana from the ontology.
     */
    public Collection<? extends Veneziana> getAllVenezianaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VENEZIANA, DefaultVeneziana.class);
    }


}
